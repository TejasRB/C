#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

char stack[MAX_SIZE];
int top = -1;

int is_operator(char ch);
int precedence(char ch);
void push(char ch);
char pop();
void infix_to_postfix(char infix[], char postfix[]);
void reverse(char s[]);

int main()
{
    char infix[MAX_SIZE], postfix[MAX_SIZE], prefix[MAX_SIZE];

    printf("Enter infix expression: ");
    gets(infix);

    infix_to_postfix(infix, postfix);
    reverse(postfix);
    strcpy(prefix, postfix);

    printf("Prefix expression: %s\n", prefix);

    return 0;
}

int is_operator(char ch)
{
    if(ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^')
        return 1;
    else
        return 0;
}

int precedence(char ch)
{
    if(ch == '^')
        return 3;
    else if(ch == '*' || ch == '/')
        return 2;
    else if(ch == '+' || ch == '-')
        return 1;
    else
        return 0;
}

void push(char ch)
{
    if(top == MAX_SIZE-1)
    {
        printf("Stack overflow!\n");
        exit(1);
    }

    top++;
    stack[top] = ch;
}

char pop()
{
    if(top == -1)
    {
        printf("Stack underflow!\n");
        exit(1);
    }

    char ch = stack[top];
    top--;
    return ch;
}

void infix_to_postfix(char infix[], char postfix[])
{
    int i, j = 0;

    for(i=0; infix[i]!='\0'; i++)
    {
        if(infix[i] == '(')
            push(infix[i]);
        else if(infix[i] == ')')
        {
            while(stack[top] != '(')
            {
                postfix[j] = pop();
                j++;
            }

            pop();
        }
        else if(is_operator(infix[i]))
        {
            while(precedence(infix[i]) <= precedence(stack[top]))
            {
                postfix[j] = pop();
                j++;
            }

            push(infix[i]);
        }
        else
        {
            postfix[j] = infix[i];
            j++;
        }
    }

    while(top != -1)
    {
        postfix[j] = pop();
        j++;
    }

    postfix[j] = '\0';
}

void reverse(char s[])
{
    int i, j;
    char temp;

    for(i=0, j=strlen(s)-1; i<j; i++, j--)
    {
        temp = s[i];
        s[i] = s[j];
        s[j] = temp;
    }
}
